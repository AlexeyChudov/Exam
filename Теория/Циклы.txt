Цикл while - цикл с предусловием.

 
 while (Условие)
{
  БлокОпераций;
}

Перед каждой итерацией цикла проверяется Условие, если оно истинно - выполняется БлокОпераций. Итерирование продолжается до тех пор, пока выполняется Условие(условное выражение не равно 0)

посчитаем сумму чисел от 1 до 30:


int count = 0;
int i = 0;
while (i<=30)
{

    count += i;
    ++i;
}
printf("Сумма чисел от 1 до 30");

При построении цикла while, в него необходимо включить конструкции, изменяющие величину проверяемого выражения так, чтобы в конце концов оно стало ложным (равным нулю). Иначе выполнение цикла будет осуществляться бесконечно (бесконечный цикл).

Пример бесконечного цикла
while (1)
{
  БлокОпераций;
}


Цикл с постусловием - do while.

do {
  БлокОпераций;
} while (Условие);

Этот цикл, в отличие от while гарантирует минимум одну итерацию.
Использовать цикл do...while лучше в тех случаях, когда должна быть выполнена хотя бы одна итерация, либо когда инициализация объектов, участвующих в проверке условия, происходит внутри тела цикла.

Пример: Проверка, что пользователь ввел число от 0 до 10
  do {
    printf("Введите число от 0 до 10: "); // приглашение пользователю
    scanf("%d", &num); // ввод числа
  } while ((num < 0) || (num > 10)); // повторяем цикл пока num<0 или num>10
  printf("Вы ввели число %d", num); // выводим введенное значение num - от 0 до 10


Параметрический цикл for:

for (Инициализация; Условие; Модификация)
{
  БлокОпераций;
}


for — параметрический цикл (цикл с фиксированным числом повторений). Для организации такого цикла необходимо осуществить три операции:

1)Инициализация - присваивание параметру цикла начального значения, осуществляется только один раз — когда цикл for начинает выполняться;

2)Условие - проверка условия повторения цикла, чаще всего - сравнение величины параметра с некоторым граничным значением, осуществляется перед каждым возможным выполнением тела цикла. Когда выражение, проверяющее Условие становится ложным (равным нулю), цикл завершается;

3)Модификация - изменение значения параметра для следующего прохождения тела цикла, осуществляется в конце каждого выполнения тела цикла. Параметр может как увеличиваться, так и уменьшаться.

Пример: подсчитаем сумму чисел от 1 до введенного k:

int k;  // объявляем целую переменную key
  int sum = 0; // начальное значение суммы равно 0
  printf("k = ");
  scanf("%d", &k);   // вводим значение переменной k
  int i=1;
  for(; i<=k; i++) // цикл для переменной i от 1 до k с шагом 1
  {
    sum = sum + i; // добавляем значение i к сумме
  }
  printf("sum = %d\n", sum); // вывод значения суммы

В записи цикла for можно опустить одно или несколько выражений, но нельзя опускать точку с запятой, разделяющие три составляющие цикла.

В цикле for может использоваться операция запятая - , - для разделения нескольких выражений. Это позволяет включить в спецификацию цикла несколько инициализирующих или корректирующих выражений. Выражения, к которым применяется операция запятая, будут вычисляться слева направо.

Пример: цикл с 2-мя параметрами:

  int k;  // объявляем целую переменную key
  printf("k = ");
  scanf("%d", &k);   // вводим значение переменной k
  for(int i=1, j=2; i<=k; i++, j+=2) // цикл для переменных
  {                                  // (i от 1 до k с шагом 1) и (j от 2 с шагом 2)
    printf("i = %d   j = %d\n", i, j); // выводим значения i и j
  }


Вложенные циклы
В Си допускаются вложенные циклы, то есть когда один цикл находится внутри другого:

 for (i = 0; i<n; i++)  // внешний цикл - Цикл1
{     
  for (j = 0; j<n; j++)   // вложенный цикл - Цикл2
  {
    ;        // блок операций Цикла2
  }
  // блок операций Цикла1;
}

Пример: Вывести числа от 0 до 99, по 10 в каждой строке

#include <stdio.h>
int main() {
  for(int i=0; i<10; i++) // цикл для десятков
  {                                  
    for (int j = 0; j < 10; j++) // цикл для единиц
    {
      printf("%2d ", i * 10 + j); // выводим вычисленное число (2 знакоместа) и пробел
    }
    printf("\n"); // во внешнем цикле переводим строку
  }
}


В теле любого цикла можно использовать операторы прерывания цикла - break и продолжения цикла - continue.

Оператор break позволяет выйти из цикла, не завершая его.
Оператор continue позволяет пропустить часть операторов тела цикла и начать новую итерацию.

Пример на Си: Вывести числа от 0 до 99 ниже главной диагонали

#include <stdio.h>
int main() {
  for(int i=0; i<10; i++) // цикл для десятков
  {                                  
    for (int j = 0; j < 10; j++) // цикл для единиц
    {
      if (j > i) // если число единиц больше числа десятков в числе
        break; // выходим из вложенного цикла и переходим к новой строке
      printf("%2d ", i * 10 + j); // выводим вычисленное число (2 знакоместа) и пробел
    }
    printf("\n"); // во внешнем цикле переводим строку
  }
}