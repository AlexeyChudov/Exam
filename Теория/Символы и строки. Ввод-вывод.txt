Символы. 

В Си есть целочисленный тип char для представления символов. Символы представлены с помощью таблицы кодировок ASCII(Всего 256 символов) или другой таблицы( например UTF-8, которая совместима с ASCII, но имеет больший алфавит).

Переменной типа char можно присвоить как целое число в диапазоне от 0 до 255, так и символ(обозначается одинарными ковычками).

Управляющие символы:

\r	Возврат каретки в начало строки
\n	Переход на новую строку
\t	Горизонтальная табуляция
\v	Вертикальная табуляция
\"	Двойные кавычки
\'	Апостроф (одинарные кавычки)
\\	Обратный слеш (косая черта)
\0	Нулевой символ (символ конца строки)
\?	Знак вопроса
\a

Строки.

В Си нет специального типа данных для строк, есть массивы символов.
Строка обязательно должна заканчиваться символом конца строки.

В Си есть строковые литералы, хранящиеся в read-only области памяти, поэтому если мы присвоим адрес такового литерала не const указателю, то получим ошибку.

Функции вывода.

1) printf(char *string, args)
Форматированный вывод - на места спецификаторов строки последовательно помещаются аргументы(переменные).

Спецификаторы:

d или i	Целое со знаком в в десятичном виде	392
u	Целое без знака в десятичном виде	7235
o	Беззнаковое в восьмеричном виде	657
x	Беззнаковое целое в шестнадцатеричном виде	7fa
X	Беззнаковое целое в шестнадцатеричном виде, верхний регистр	7FA
hh	signed char	unsigned char	
h	short int	unsigned short int
l	long int	unsigned long int
ll
z/zu    Знаковое/ беззнаковое целое число, представляющее размер объекта данных
f или F	Число с плавающей точкой	3.4563745
e	Экспоненциальная форма для числа с плавающей точкой	3.1234e+3
E	Экспоненциальная форма для числа с плавающей точкой, верхний регистр	3.1234E+3
g	Кратчайшее из представлений форматов f и e	3.12
G	Кратчайшее из представлений форматов F и E	3.12
a	Шестнадцатеричное представление числа с плавающей точкой	-0xc.90fep-2
A	Шестнадцатеричное представление числа с плавающей точкой, верхний регистр	-0xc.90FEP-2
c	Буква	a
s	Строка (нуль-терминированный массив букв)	Hello World
p	Адрес указателя	b8000000
n	Ничего не печатает. Аргументом должен быть указатель на signed int. По этому адресу будет сохранено количество букв, которое было выведено до встречи %n	
%	Два идущих друг за другом процента выводят знак процента

Опциональные суб-спецификаторы:

-	Выключка влево на заданное шириной значение
+	Явно указывать знак у числа, даже для положительных чисел
(пробел)	Если знак не будет выведен, то вставляет пробел перед выводимым числом
#	Когда используется вместе с o, x или X, вставляет перед числом 0, 0x или 0X
Когда используется со спецификаторами a, A, e, E, f, F, g или G, вставляет десятичную точку, даже если после неё нет десятичных знаков.
0	Вставляет нули, когда объявлен спецификатор ширины

Ширина:
(число)	Минимальное количество знаков, которое необходимо вывести. Если в числе меньше знаков, то вставляет пробелы (или нули).
*	Ширина не указана в строке формата, она передаётся отдельно в виде аргумента, который должен предшествовать выводимому числу

Точность:
.число	Для спецификаторов целых (d, i, o, u, x, X) точность определяет минимальное количество знаков, которое необходимо вывести. Если значение короче, то выводятся нули перед числом. Значение не обрезается, даже если оно длиннее. Точночть 0 означает, что для значения 0 ничего не выводится.
Для спецификаторов чисел с плавающей точкой (a, A, e, E, f, F) это число знаков, которые необходимо вывести после десятичной точки (по умолчанию 6).
Для g и G - это число значащих разрядов, которые необходимо вывести.
Для s - выводится указанное число символов. По умолчанию выводятся все символы до первого нулевого.
Если число не стоит, то по умолчанию точность равна 0
.*	Точность не указана в строке формата, она передаётся отдельно в виде аргумента, который должен предшествовать выводимому числу



2) putchar(char)
Выводит символ в stdout 

3) puts(char * string)

Выводит символы в stdout до символа конца строки, если таковой отсутсвтует, то граница вывода не определена

4) fputs( char * string, FILE *stream)
Записывает строку в указанный поток, при записи символ конца строки не учитывается.При ошибках в процессе записи возвращается значение EOF.
  
Функции ввода:

1)scanf(char string[], *args)
Записывает строку, число или символ(в зависимости от спецификатора) в указанный адрес.

2)gets(char * string)
Небезопасная функция записи строк, т.к.  по адресу строки, переданной в параметре может записываться строка, большая по длине, т.е. изменятся соседняя область памяти.


3)  fgets(char * string, MAXLEN, stream)

Безопасная функция записи строк, она записывает определенное во втором параметре количество символов в строку, переданную в 1 параметре из указанного потока, если  MAXLEN>len(string), то записывается количство символов, умещающееся в string,
 





